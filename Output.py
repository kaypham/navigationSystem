#Kelly Pham 25384246. Project 3class TOTALDISTANCE:    def _calculate(self, all_parsed_urls: ['json']) -> str:        '''        this will take in a parsed URL and return the total distance of the trip        '''        print("TOTAL DISTANCE")        return "{} miles".format(str(round(all_parsed_urls[0]['route']['distance']))) + "\n"class TOTALTIME:    def _calculate(self, all_parsed_urls: ['json']) -> str:        # parsed_search_url = parsed_search_url[0]        duration = round(all_parsed_urls[0]['route']['time']/60)        print("TOTAL TIME")        return "{} minutes".format(duration) + "\n"class STEPS:    def _calculate(self, all_parsed_urls: ['json']) -> [str]:        step = ''        parsed_search_url = all_parsed_urls[0]        for trip in range(len(parsed_search_url['route']['legs'])):            for turn in range(len(parsed_search_url['route']['legs'][trip]['maneuvers'])):                step += parsed_search_url['route']['legs'][trip]['maneuvers'][turn]['narrative'] + "\n"        print("STEPS")        return stepclass LATLONG:    def _calculate(self, all_parsed_urls: ['json']) -> [str]:        latlong = ''        parsed_search_url = all_parsed_urls[0]        for location in parsed_search_url['route']['locations']:            long = '{:.2f}'.format(location['latLng']['lng'])            lat = '{:.2f}'.format(location['latLng']['lat'])            if '-' in long:                long = long.strip('-') +  'W'            else:                long = long + "E"            if '-' in lat:                lat = lat.strip('-') + 'S'            else:                lat = lat + "N"            latlong += '{} {}'.format(lat, long) + '\n'        print("LATLONG")        return latlongclass ELEVATION:    def _calculate(self, all_parsed_urls: ['json']) -> str:        elevation = ''        print("ELEVATION")        for each in all_parsed_urls[1]:            elevation += '{} feet'.format(str(round(each['elevationProfile'][0]['height']))) + "\n"        return elevationdef _calculate_classes(classes: list, all_parsed_urls: list):    dict = {"TOTALDISTANCE": TOTALDISTANCE(), "TOTALTIME": TOTALTIME(), "STEPS": STEPS(), "LATLONG": LATLONG(), "ELEVATION": ELEVATION()}    for each in classes:        print(dict[each]._calculate(all_parsed_urls))    #using dictionary to avoid having if then statements, convert the str to the object, and repeat calling the same function... -> full use of duck typing